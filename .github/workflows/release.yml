name: Create release

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Type of release (bugfix, minor, major)'
        required: true
        default: 'bugfix'
        type: choice
        options:
          - bugfix
          - minor
          - major
    branches:
      - develop

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Check if branch is develop
        if: github.ref != 'refs/heads/develop'
        run: |
          echo "This workflow must only be run from the 'develop' branch!"
          exit 1

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Configure Git
        run: |
          git config user.name "Sajid-Nawaz-Ch"
          git config user.email "sajid.chaudhry.extern@dvag.com"

      - name: Calculate release and next snapshot version
        id: versioning
        run: |
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $current_version"
          
          version=${current_version%-SNAPSHOT}
          IFS='.' read -r major minor patch <<< "$version"
          
          release_type="${{ github.event.inputs.release-type }}"
          echo "Selected release type: $release_type"
          
          if [ "$release_type" = "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$release_type" = "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            #batch version will be incremented automatically be the plugin
            patch=$((patch))
          fi
          
          release_version="${major}.${minor}.${patch}"
          next_patch=$((patch + 1))
          next_snapshot_version="${major}.${minor}.$((next_patch))-SNAPSHOT"
          
          echo "release_version=$release_version"
          echo "next_snapshot_version=$next_snapshot_version"
          
          echo "release_version=$release_version" >> $GITHUB_OUTPUT
          echo "next_snapshot_version=$next_snapshot_version" >> $GITHUB_OUTPUT

#      - name: Run gitflow:release
#        run: |
#          mvn -B gitflow:release \
#            -DreleaseVersion=${{ steps.versioning.outputs.release_version }} \
#            -DdevelopmentVersion=${{ steps.versioning.outputs.next_snapshot_version }}

      - name: Extract versions from pom.xml
        id: versions
        run: |
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $current_version"
          
          release_type="${{ github.event.inputs.release-type }}"
          echo "Selected release type: $release_type"

          if [ "$release_type" = "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$release_type" = "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            #batch version will be incremented automatically be the plugin
            patch=$((patch))
          fi
          
          release_version="${major}.${minor}.${patch}"
          next_patch=$((patch + 1))
          next_snapshot_version="${major}.${minor}.$((next_patch))-SNAPSHOT"
          
          echo "release_version=$release_version"
          echo "next_snapshot_version=$next_snapshot_version"
          
          echo "release_version=$release_version" >> $GITHUB_OUTPUT
          echo "next_snapshot_version=$next_snapshot_version" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          git checkout -b release/${{ steps.versions.outputs.release_version }}

      - name: Set release version in pom.xml
        run: |
          mvn versions:set -DnewVersion=${{ steps.versions.outputs.release_version }}
          mvn versions:commit
          git commit -am "Release version ${{ steps.versions.outputs.release_version }}"

      - name: Merge release to main and tag it
        run: |
          git checkout main
          git merge --no-ff release/${{ steps.versions.outputs.release_version }} -m "Merge release ${{
            steps.versions.outputs.release_version }} into main"
          git tag -a ${{ steps.versions.outputs.release_version }} -m "Release ${{ steps.versions.outputs.release_version }}"

      - name: Merge release back to develop
        run: |
          git checkout develop
          git merge --no-ff release/${{ steps.versions.outputs.release_version }} -m "Merge release ${{
            steps.versions.outputs.release_version }} back into develop"

      - name: Set next development version
        run: |
          mvn versions:set -DnewVersion=${{ steps.versions.outputs.development_version }}
          mvn versions:commit
          git commit -am "Start next development iteration ${{ steps.versions.outputs.development_version }}"

      - name: Set next development version
        run: |
          mvn --file pom.xml -s ${{ github.workspace }}/.github/settings.xml versions:set -DnewVersion=${{ steps.versions.outputs.development_version }}
          mvn --file pom.xml -s ${{ github.workspace }}/.github/settings.xml versions:commit
          git commit -am "Start next development iteration ${{ steps.versions.outputs.development_version }}"


      - name: Delete release branch
        run: |
          git branch -d release/${{ steps.versions.outputs.release_version }}

      - name: Push all changes
        run: |
          git push origin develop
          git push origin main
          git push origin ${{ steps.versions.outputs.release_version }}
