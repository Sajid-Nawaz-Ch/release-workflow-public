name: Create release

on:
  workflow_dispatch:
    branches:
      - develop

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Check if branch is develop
        if: github.ref != 'refs/heads/develop'
        run: |
          echo "This workflow must only be run from the 'develop' branch!"
          exit 1

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Configure Git
        run: |
          git config user.name "Sajid-Nawaz-Ch"
          git config user.email "sajid.chaudhry.extern@dvag.com"

      - name: Extract versions from pom.xml
        id: versions
        run: |
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $current_version"
          
          release_version=${current_version/-SNAPSHOT/}
          echo "Release version: $release_version"
          
          # Calculate the next minor version
          IFS='.' read -r major minor patch <<< "${release_version}"
          next_minor=$((minor + 1))
          development_version="${major}.${next_minor}.0-SNAPSHOT"
          
          echo "Release version is $release_version"
          echo "Next development version is $development_version"
          
          echo "release_version=$release_version" >> $GITHUB_OUTPUT
          echo "development_version=$development_version" >> $GITHUB_OUTPUT      

      - name: Create release branch
        run: |
          git checkout -b release/${{ steps.versions.outputs.release_version }}

      - name: Set release version in pom.xml
        run: |
          mvn versions:set -DnewVersion=${{ steps.versions.outputs.release_version }}
          mvn versions:commit
          git commit -am "Release version ${{ steps.versions.outputs.release_version }}"

      - name: Merge release to master and tag it
        run: |
          git checkout master
          git merge --no-ff release/${{ steps.versions.outputs.release_version }} -m "Merge release ${{
            steps.versions.outputs.release_version }} into master"
          git tag -a ${{ steps.versions.outputs.release_version }} -m "Release ${{ steps.versions.outputs.release_version }}"
          
      - name: Merge release back to develop
        run: |
          git checkout develop
          git merge --no-ff release/${{ steps.versions.outputs.release_version }} -m "Merge release ${{
            steps.versions.outputs.release_version }} back into develop"      

      - name: Set next development version
        run: |
          mvn versions:set -DnewVersion=${{ steps.versions.outputs.development_version }}
          mvn versions:commit
          git commit -am "Start next development iteration ${{ steps.versions.outputs.development_version }}"

      - name: Delete release branch
        run: |
          git branch -d release/${{ steps.versions.outputs.release_version }} 
          
      - name: Push all changes
        run: |
          git push origin develop
          git push origin master
          git push origin ${{ steps.versions.outputs.release_version }}
